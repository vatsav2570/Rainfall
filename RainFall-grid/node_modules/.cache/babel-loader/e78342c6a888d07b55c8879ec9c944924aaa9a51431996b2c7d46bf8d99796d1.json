{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sreev\\\\OneDrive\\\\Desktop\\\\Rainfall-Pattern\\\\rain-grid\\\\src\\\\grid.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './Grid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRID_ROWS = 20;\nconst GRID_COLS = 15;\nconst FALL_INTERVAL = 500; // Adjust the interval for better effect\n\nconst getRandomInt = max => Math.floor(Math.random() * max);\nconst Grid = () => {\n  _s();\n  const [grid, setGrid] = useState(Array(GRID_ROWS).fill().map(() => Array(GRID_COLS).fill(false)));\n  const [colors, setColors] = useState(Array(GRID_ROWS).fill().map(() => Array(GRID_COLS).fill(null)));\n  const [activeDrops, setActiveDrops] = useState([]); // Array to keep track of active raindrops\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setGrid(prevGrid => {\n        const newGrid = prevGrid.map(row => row.slice());\n        const newColors = colors.map(row => row.slice());\n\n        // Update active drops\n        const newActiveDrops = activeDrops.map(drop => {\n          const {\n            row,\n            col\n          } = drop;\n          if (row < GRID_ROWS - 1) {\n            newGrid[row][col] = false; // Clear the current cell\n            newGrid[row + 1][col] = true; // Move the drop one row down\n            newColors[row + 1][col] = drop.color; // Set the color for the new cell\n            return {\n              row: row + 1,\n              col,\n              color: drop.color\n            }; // Update the drop position\n          }\n          return drop; // Keep the drop in the same position if it reached the bottom\n        });\n\n        // Add new raindrop\n        if (Math.random() < 0.1) {\n          // Adjust the probability to control the frequency of new drops\n          const col = getRandomInt(GRID_COLS);\n          newActiveDrops.push({\n            row: 0,\n            col,\n            color: `hsl(${getRandomInt(360)}, 100%, 50%)`\n          });\n          newGrid[0][col] = true;\n          newColors[0][col] = newActiveDrops[newActiveDrops.length - 1].color;\n        }\n        setColors(newColors);\n        setActiveDrops(newActiveDrops);\n        return newGrid;\n      });\n    }, FALL_INTERVAL);\n    return () => clearInterval(intervalId);\n  }, [activeDrops, colors]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell\",\n        style: {\n          backgroundColor: colors[rowIndex][colIndex]\n        }\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"EZvw75BaumeyiP9gSBIuJmH0KCg=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","GRID_ROWS","GRID_COLS","FALL_INTERVAL","getRandomInt","max","Math","floor","random","Grid","_s","grid","setGrid","Array","fill","map","colors","setColors","activeDrops","setActiveDrops","intervalId","setInterval","prevGrid","newGrid","row","slice","newColors","newActiveDrops","drop","col","color","push","length","clearInterval","className","children","rowIndex","cell","colIndex","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sreev/OneDrive/Desktop/Rainfall-Pattern/rain-grid/src/grid.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './Grid.css';\r\n\r\nconst GRID_ROWS = 20;\r\nconst GRID_COLS = 15;\r\nconst FALL_INTERVAL = 500; // Adjust the interval for better effect\r\n\r\nconst getRandomInt = (max) => Math.floor(Math.random() * max);\r\n\r\nconst Grid = () => {\r\n  const [grid, setGrid] = useState(Array(GRID_ROWS).fill().map(() => Array(GRID_COLS).fill(false)));\r\n  const [colors, setColors] = useState(Array(GRID_ROWS).fill().map(() => Array(GRID_COLS).fill(null)));\r\n  const [activeDrops, setActiveDrops] = useState([]); // Array to keep track of active raindrops\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setGrid((prevGrid) => {\r\n        const newGrid = prevGrid.map((row) => row.slice());\r\n        const newColors = colors.map((row) => row.slice());\r\n\r\n        // Update active drops\r\n        const newActiveDrops = activeDrops.map(drop => {\r\n          const { row, col } = drop;\r\n          if (row < GRID_ROWS - 1) {\r\n            newGrid[row][col] = false; // Clear the current cell\r\n            newGrid[row + 1][col] = true; // Move the drop one row down\r\n            newColors[row + 1][col] = drop.color; // Set the color for the new cell\r\n            return { row: row + 1, col, color: drop.color }; // Update the drop position\r\n          }\r\n          return drop; // Keep the drop in the same position if it reached the bottom\r\n        });\r\n\r\n        // Add new raindrop\r\n        if (Math.random() < 0.1) { // Adjust the probability to control the frequency of new drops\r\n          const col = getRandomInt(GRID_COLS);\r\n          newActiveDrops.push({ row: 0, col, color: `hsl(${getRandomInt(360)}, 100%, 50%)` });\r\n          newGrid[0][col] = true;\r\n          newColors[0][col] = newActiveDrops[newActiveDrops.length - 1].color;\r\n        }\r\n\r\n        setColors(newColors);\r\n        setActiveDrops(newActiveDrops);\r\n        return newGrid;\r\n      });\r\n    }, FALL_INTERVAL);\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, [activeDrops, colors]);\r\n\r\n  return (\r\n    <div className=\"grid\">\r\n      {grid.map((row, rowIndex) => (\r\n        <div className=\"row\" key={rowIndex}>\r\n          {row.map((cell, colIndex) => (\r\n            <div\r\n              className=\"cell\"\r\n              key={colIndex}\r\n              style={{ backgroundColor: colors[rowIndex][colIndex] }}\r\n            />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}