{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sreev\\\\OneDrive\\\\Desktop\\\\Rainfall-Pattern\\\\rain-grid\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport './Grid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst numRows = 20;\nconst numCols = 20;\nconst App = () => {\n  _s();\n  const [grid, setGrid] = useState(createGrid());\n  const [colorIndex, setColorIndex] = useState(0);\n  const colors = [['#ff00ff', '#e600e6', '#cc00cc', '#b300b3', '#990099'],\n  // Five intensities for each color\n  ['#00ffff', '#00e6e6', '#00cccc', '#00b3b3', '#009999'], ['#ffff00', '#e6e600', '#cccc00', '#b3b300', '#999900']];\n  useEffect(() => {\n    const interval = setInterval(() => {\n      createRainfall();\n    }, 2000);\n    const colorChangeInterval = setInterval(() => {\n      setColorIndex(prevIndex => (prevIndex + 1) % colors.length);\n    }, 5000); // Change color every 10 seconds\n\n    // Start rainfall immediately\n    setTimeout(() => {\n      createRainfall();\n    }, 1000); // Start after 1 second\n\n    return () => {\n      clearInterval(interval);\n      clearInterval(colorChangeInterval);\n    };\n  }, []);\n  const createRainfall = () => {\n    const randomColumn = Math.floor(Math.random() * numCols);\n    for (let i = 0; i < numRows; i++) {\n      setTimeout(() => {\n        setGrid(prevGrid => {\n          const newGrid = prevGrid.map((row, rowIndex) => row.map((cell, colIndex) => {\n            if (colIndex === randomColumn && rowIndex >= i && rowIndex < i + 5) {\n              return colors[colorIndex][rowIndex - i];\n            }\n            return cell;\n          }));\n          return newGrid;\n        });\n      }, i * 100);\n    }\n\n    // Reset the column after the animation\n    setTimeout(() => {\n      setGrid(prevGrid => {\n        const newGrid = prevGrid.map((row, rowIndex) => row.map((cell, colIndex) => {\n          if (colIndex === randomColumn && rowIndex >= 0) {\n            return false;\n          }\n          return cell;\n        }));\n        return newGrid;\n      });\n    }, (numRows + 5) * 100); // Wait for the animation to complete before resetting\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell\",\n        style: {\n          backgroundColor: cell ? cell : ''\n        }\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"38aANI9wIkJ7xkzcRry6j+HxaX8=\");\n_c = App;\nconst createGrid = () => {\n  const grid = [];\n  for (let i = 0; i < numRows; i++) {\n    const row = [];\n    for (let j = 0; j < numCols; j++) {\n      row.push(false);\n    }\n    grid.push(row);\n  }\n  return grid;\n};\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","numRows","numCols","App","_s","grid","setGrid","createGrid","colorIndex","setColorIndex","colors","interval","setInterval","createRainfall","colorChangeInterval","prevIndex","length","setTimeout","clearInterval","randomColumn","Math","floor","random","i","prevGrid","newGrid","map","row","rowIndex","cell","colIndex","className","children","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","j","push","$RefreshReg$"],"sources":["C:/Users/sreev/OneDrive/Desktop/Rainfall-Pattern/rain-grid/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport './Grid.css';\n\nconst numRows = 20;\nconst numCols = 20;\n\nconst App = () => {\n  const [grid, setGrid] = useState(createGrid());\n  const [colorIndex, setColorIndex] = useState(0);\n\n  const colors = [\n    ['#ff00ff', '#e600e6', '#cc00cc', '#b300b3', '#990099'], // Five intensities for each color\n    ['#00ffff', '#00e6e6', '#00cccc', '#00b3b3', '#009999'],\n    ['#ffff00', '#e6e600', '#cccc00', '#b3b300', '#999900']\n  ];\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      createRainfall();\n    }, 2000);\n\n    const colorChangeInterval = setInterval(() => {\n      setColorIndex(prevIndex => (prevIndex + 1) % colors.length);\n    }, 5000); // Change color every 10 seconds\n\n    // Start rainfall immediately\n    setTimeout(() => {\n      createRainfall();\n    }, 1000); // Start after 1 second\n\n    return () => {\n      clearInterval(interval);\n      clearInterval(colorChangeInterval);\n    };\n  }, []);\n\n  const createRainfall = () => {\n    const randomColumn = Math.floor(Math.random() * numCols);\n\n    for (let i = 0; i < numRows; i++) {\n      setTimeout(() => {\n        setGrid(prevGrid => {\n          const newGrid = prevGrid.map((row, rowIndex) =>\n            row.map((cell, colIndex) => {\n              if (colIndex === randomColumn && rowIndex >= i && rowIndex < i + 5) {\n                return colors[colorIndex][rowIndex - i];\n              }\n              return cell;\n            })\n          );\n          return newGrid;\n        });\n      }, i * 100);\n    }\n\n    // Reset the column after the animation\n    setTimeout(() => {\n      setGrid(prevGrid => {\n        const newGrid = prevGrid.map((row, rowIndex) =>\n          row.map((cell, colIndex) => {\n            if (colIndex === randomColumn && rowIndex >= 0) {\n              return false;\n            }\n            return cell;\n          })\n        );\n        return newGrid;\n      });\n    }, (numRows + 5) * 100); // Wait for the animation to complete before resetting\n  };\n\n  return (\n    <div className=\"grid\">\n      {grid.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"row\">\n          {row.map((cell, colIndex) => (\n            <div\n              key={colIndex}\n              className=\"cell\"\n              style={{ backgroundColor: cell ? cell : '' }}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst createGrid = () => {\n  const grid = [];\n  for (let i = 0; i < numRows; i++) {\n    const row = [];\n    for (let j = 0; j < numCols; j++) {\n      row.push(false);\n    }\n    grid.push(row);\n  }\n  return grid;\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}