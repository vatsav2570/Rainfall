{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sreev\\\\OneDrive\\\\Desktop\\\\Rainfall-Pattern\\\\rain-grid\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport './Grid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst numRows = 20;\nconst numCols = 20;\nconst maxActiveColumns = 1; // Change this to set the maximum number of active rainfall columns\n\nconst App = () => {\n  _s();\n  const [grid, setGrid] = useState(createGrid());\n  const [colorIndex, setColorIndex] = useState(0);\n  const [activeColumns, setActiveColumns] = useState([]);\n  const colors = [['#ff00ff', '#e600e6', '#cc00cc', '#b300b3', '#990099'],\n  // Five intensities for each color\n  ['#00ffff', '#00e6e6', '#00cccc', '#00b3b3', '#009999'], ['#ffff00', '#e6e600', '#cccc00', '#b3b300', '#999900']];\n  useEffect(() => {\n    // Initialize the currentColors with the first color set\n    setCurrentColors(colors[colorIndex]);\n    const colorChangeInterval = setInterval(() => {\n      setColorIndex(prevIndex => (prevIndex + 1) % colors.length);\n    }, 5000); // Change color every 5 seconds\n\n    // Start the rainfall process\n    startRainfallProcess();\n    return () => {\n      clearInterval(colorChangeInterval);\n    };\n  }, []);\n  useEffect(() => {\n    setCurrentColors(colors[colorIndex]);\n  }, [colorIndex]);\n  const startRainfallProcess = () => {\n    if (activeColumns.length < maxActiveColumns) {\n      const randomDelay = Math.random() * 2000; // Random delay between 0 and 2 seconds\n      setTimeout(() => {\n        createRainfall();\n        startRainfallProcess(); // Recursively start another rainfall if allowed\n      }, randomDelay);\n    }\n  };\n  const createRainfall = () => {\n    const randomColumn = Math.floor(Math.random() * numCols);\n    if (activeColumns.includes(randomColumn)) {\n      createRainfall(); // Try another column if this one is already active\n      return;\n    }\n    setActiveColumns(prev => [...prev, randomColumn]);\n    for (let i = 0; i < numRows + 5; i++) {\n      setTimeout(() => {\n        setGrid(prevGrid => {\n          const newGrid = prevGrid.map((row, rowIndex) => row.map((cell, colIndex) => {\n            if (colIndex === randomColumn) {\n              if (rowIndex >= i && rowIndex < i + 5) {\n                return currentColors[rowIndex - i];\n              } else if (rowIndex === i - 5) {\n                return false;\n              }\n            }\n            return cell;\n          }));\n          return newGrid;\n        });\n      }, i * 100);\n    }\n\n    // Reset the column and remove it from active columns\n    setTimeout(() => {\n      setGrid(prevGrid => {\n        const newGrid = prevGrid.map((row, rowIndex) => row.map((cell, colIndex) => {\n          if (colIndex === randomColumn) {\n            return false;\n          }\n          return cell;\n        }));\n        return newGrid;\n      });\n      setActiveColumns(prev => prev.filter(col => col !== randomColumn));\n    }, (numRows + 5) * 100); // Wait for the animation to complete before resetting\n\n    setTimeout(startRainfallProcess, (numRows + 5) * 100); // Continue the rainfall process\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell\",\n        style: {\n          backgroundColor: cell ? cell : ''\n        }\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"9dtSTXuj8csvwMzl1gMjaZQAku8=\");\n_c = App;\nconst createGrid = () => {\n  const grid = [];\n  for (let i = 0; i < numRows; i++) {\n    const row = [];\n    for (let j = 0; j < numCols; j++) {\n      row.push(false);\n    }\n    grid.push(row);\n  }\n  return grid;\n};\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","numRows","numCols","maxActiveColumns","App","_s","grid","setGrid","createGrid","colorIndex","setColorIndex","activeColumns","setActiveColumns","colors","setCurrentColors","colorChangeInterval","setInterval","prevIndex","length","startRainfallProcess","clearInterval","randomDelay","Math","random","setTimeout","createRainfall","randomColumn","floor","includes","prev","i","prevGrid","newGrid","map","row","rowIndex","cell","colIndex","currentColors","filter","col","className","children","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","j","push","$RefreshReg$"],"sources":["C:/Users/sreev/OneDrive/Desktop/Rainfall-Pattern/rain-grid/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport './Grid.css';\n\nconst numRows = 20;\nconst numCols = 20;\nconst maxActiveColumns = 1; // Change this to set the maximum number of active rainfall columns\n\nconst App = () => {\n  const [grid, setGrid] = useState(createGrid());\n  const [colorIndex, setColorIndex] = useState(0);\n  const [activeColumns, setActiveColumns] = useState([]);\n\n  const colors = [\n    ['#ff00ff', '#e600e6', '#cc00cc', '#b300b3', '#990099'], // Five intensities for each color\n    ['#00ffff', '#00e6e6', '#00cccc', '#00b3b3', '#009999'],\n    ['#ffff00', '#e6e600', '#cccc00', '#b3b300', '#999900']\n  ];\n\n  useEffect(() => {\n    // Initialize the currentColors with the first color set\n    setCurrentColors(colors[colorIndex]);\n\n    const colorChangeInterval = setInterval(() => {\n      setColorIndex(prevIndex => (prevIndex + 1) % colors.length);\n    }, 5000); // Change color every 5 seconds\n\n    // Start the rainfall process\n    startRainfallProcess();\n\n    return () => {\n      clearInterval(colorChangeInterval);\n    };\n  }, []);\n\n  useEffect(() => {\n    setCurrentColors(colors[colorIndex]);\n  }, [colorIndex]);\n\n  const startRainfallProcess = () => {\n    if (activeColumns.length < maxActiveColumns) {\n      const randomDelay = Math.random() * 2000; // Random delay between 0 and 2 seconds\n      setTimeout(() => {\n        createRainfall();\n        startRainfallProcess(); // Recursively start another rainfall if allowed\n      }, randomDelay);\n    }\n  };\n\n  const createRainfall = () => {\n    const randomColumn = Math.floor(Math.random() * numCols);\n    if (activeColumns.includes(randomColumn)) {\n      createRainfall(); // Try another column if this one is already active\n      return;\n    }\n\n    setActiveColumns(prev => [...prev, randomColumn]);\n\n    for (let i = 0; i < numRows + 5; i++) {\n      setTimeout(() => {\n        setGrid(prevGrid => {\n          const newGrid = prevGrid.map((row, rowIndex) =>\n            row.map((cell, colIndex) => {\n              if (colIndex === randomColumn) {\n                if (rowIndex >= i && rowIndex < i + 5) {\n                  return currentColors[rowIndex - i];\n                } else if (rowIndex === i - 5) {\n                  return false;\n                }\n              }\n              return cell;\n            })\n          );\n          return newGrid;\n        });\n      }, i * 100);\n    }\n\n    // Reset the column and remove it from active columns\n    setTimeout(() => {\n      setGrid(prevGrid => {\n        const newGrid = prevGrid.map((row, rowIndex) =>\n          row.map((cell, colIndex) => {\n            if (colIndex === randomColumn) {\n              return false;\n            }\n            return cell;\n          })\n        );\n        return newGrid;\n      });\n      setActiveColumns(prev => prev.filter(col => col !== randomColumn));\n    }, (numRows + 5) * 100); // Wait for the animation to complete before resetting\n\n    setTimeout(startRainfallProcess, (numRows + 5) * 100); // Continue the rainfall process\n  };\n\n  return (\n    <div className=\"grid\">\n      {grid.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"row\">\n          {row.map((cell, colIndex) => (\n            <div\n              key={colIndex}\n              className=\"cell\"\n              style={{ backgroundColor: cell ? cell : '' }}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst createGrid = () => {\n  const grid = [];\n  for (let i = 0; i < numRows; i++) {\n    const row = [];\n    for (let j = 0; j < numCols; j++) {\n      row.push(false);\n    }\n    grid.push(row);\n  }\n  return grid;\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}